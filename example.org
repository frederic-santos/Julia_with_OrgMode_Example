# TODO: new ob-julia https://raw.githubusercontent.com/frederic-santos/ob-julia/master/ob-julia.el

# uses minted package instead of listings 
#+LATEX_HEADER: \usepackage{minted}    

# uses fonts to support Greek letters etc...
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \setmonofont{DejaVu Sans Mono}[Scale=MatchLowercase]

# defines the \begin{comment} \end{comment} environment, used to avoid
# conflict between bibtex and biblatex
#+LATEX_HEADER: \usepackage{verbatim} 

# uses the biblatex package (and not the old bibtex) 
#+LATEX_HEADER: \usepackage[backend=biber, bibencoding=utf8 ]{biblatex}
# our bibliography file
#+LATEX_HEADER: \addbibresource{my-bib.bib}

#+BEGIN_EXPORT latex
\definecolor{bg}{rgb}{0.95,0.95,0.95}
\setminted[julia]{
  bgcolor=bg,
  breaklines=true,
  mathescape,
  fontsize=\footnotesize}
#+END_EXPORT
#+TITLE: My title
#+AUTHOR: author

* Very simple demo

#+BEGIN_SRC julia  :eval no-export :session *demo_session* :exports none
using Plots
#+END_SRC 

#+RESULTS:

** UTF8 support + escape math equation
Note that UTF8 is supported (the \alpha variable) :

#+BEGIN_SRC julia :eval no-export :session *demo_session* :exports both :results silent :wrap "SRC julia :eval never"
# Generate a matrix $a_{i,j}=\mathcal{U}([0,1[)$
α=rand(4,5)
#+END_SRC

** Long lines are wrapped

#+BEGIN_SRC julia :eval no-export :session *demo_session* :exports both :wrap "SRC julia :eval never"
function ⊗(a::AbstractArray{T},b::AbstractArray{S}) where {T<:Number,S<:Number} kron(a,b) end;

β=rand(2,5);
γ = α ⊗ β
#+END_SRC

#+RESULTS:
#+begin_SRC julia :eval never
|     0.5842776780889614 |     0.0543654397951087 |    0.5693869552109505 |     0.616996990096394 |  0.024724801587366476 |  0.45792501111058637 | 0.04260866974010351 | 0.4462544738043169 |  0.4835686252283467 | 0.019377952412342456 |   0.3881537315128061 | 0.036116643016085345 |  0.3782613637794919 |  0.4098901823896493 | 0.016425450358534523 |   0.6300977267185226 |  0.05862886999036611 |  0.6140392480422219 |  0.6653829427875477 | 0.026663762553314745 |    0.811139446209529 |  0.07547430679292128 |  0.7904669934325633 |  0.8565629248350889 |  0.03432488116406073 |
|   0.013014085016862546 |    0.10263441620475663 |    0.4821255891080069 |   0.23097530487870468 |   0.37019693228175915 | 0.010199730794838812 | 0.08043926362994779 | 0.3778637692802065 |  0.1810258598254161 |  0.29014018622566357 |   0.0086456591633661 |  0.06818321685985927 | 0.32029093954465476 | 0.15344403840518905 |  0.24593327119691852 | 0.014034671684305099 |  0.11068318157424684 |  0.5199346972887942 | 0.24908878088276074 |   0.3992284049458268 |  0.01806715900567801 |  0.14248503176547667 |  0.6693240183873116 | 0.32065777611114477 |   0.5139360032059486 |
|      0.723825064458261 |    0.06734994239845789 |    0.7053778794104606 |    0.7643589732672912 |  0.030630009965857994 |   0.7670694235192304 | 0.07137371172453717 | 0.7475201259126886 |   0.810024998823043 | 0.032459975815404794 |  0.09106079096569197 | 0.008472957524464147 | 0.08874004339279543 | 0.09616015817238582 | 0.003853407503739315 |  0.23671640012340212 | 0.022025813550700518 | 0.23068351807586784 | 0.24997242212007778 |  0.01001709674186053 |   0.3694625968419215 |  0.03437748406006319 |  0.3600465856717573 | 0.39015235178975044 | 0.015634500073231986 |
|   0.016122335799317593 |      0.127147357687919 |    0.5972752317947457 |   0.28614085598635425 |    0.4586138208249262 | 0.017085552068609153 |  0.1347436765493349 | 0.6329589706568242 | 0.30323611632739833 |   0.4860133427700795 | 0.002028269981503258 | 0.015995769597900278 | 0.07514019298592944 | 0.03599794197955698 |  0.05769589825322232 | 0.005272574105804794 |  0.04158168357932338 | 0.19533012836346128 | 0.09357818163980486 |   0.1499829420714618 | 0.008229336540081691 |  0.06489992576884032 | 0.30486766624116013 | 0.14605510213218775 |  0.23409061320139407 |
|     0.7939937915935185 |    0.07387895052871614 |    0.7737583077459224 |    0.8384571205436914 |   0.03359933075478798 |   0.6697459840438668 | 0.06231803188621691 | 0.6526770419619491 |  0.7072514863751054 | 0.028341552639118306 |    0.584366263875041 | 0.054373682460198296 |  0.5694732833266777 |  0.6170905366504147 |  0.02472855026041427 |   0.5117843475110432 | 0.047620133672904505 | 0.49874116756787557 |  0.5404440625313123 | 0.021657110860572207 |   0.6852996367958047 |   0.0637652567315083 |  0.6678342990589521 |  0.7236761373464353 | 0.028999734515085696 |
|   0.017685260098342804 |    0.13947322022799277 |    0.6551760213948132 |     0.313879795450937 |    0.5030725576579855 | 0.014917789097399065 | 0.11764780797830926 | 0.5526510582536862 |  0.2647624385750821 |   0.4243494454760204 | 0.013016058159076528 |  0.10264997721415213 |  0.4821986870131672 | 0.23101032440745783 |  0.37025306002286623 | 0.011399382962212254 |  0.08990021303112417 |  0.4223066177148217 |  0.2023174085396323 |   0.3242653322955851 |  0.01526422807124201 |  0.12037996792538772 |  0.5654853907586286 | 0.27091107272812154 |  0.43420420246994834 |
|   0.004708734427214139 | 0.00043813485884170453 | 0.0045887290563241725 |  0.004972421637357226 | 0.0001992588948824175 |   0.5305590930137506 | 0.04936707238813045 | 0.5170374256272489 |  0.5602701861355628 | 0.022451599294438174 |   0.4096546456019017 |  0.03811724426149619 |  0.3992143121233072 | 0.43259513891080753 | 0.017335301709588465 |   0.7074623962670874 |  0.06582744087941278 |  0.6894322251952043 |  0.7470800023216255 | 0.029937593090050042 |  0.24872050703875684 | 0.023142762864826805 | 0.24238169197995435 |  0.2626487541336404 | 0.010525072953935654 |
| 0.00010488141590146797 |   0.000827137895428514 | 0.0038854836404140576 | 0.0018614460396226913 | 0.0029834428136732098 | 0.011817567916567106 | 0.09319819122937711 | 0.4377988837645055 | 0.20973939765393773 |   0.3361609659131589 | 0.009124566255642768 |  0.07196007476177446 |  0.3380327449572304 | 0.16194373020095118 |  0.25955619867734325 | 0.015757876976178666 |   0.1242730858128645 |  0.5837733279279899 | 0.27967240371474444 |  0.44824647359350495 | 0.005539951200303598 |  0.04369032909415225 |  0.2052354992775281 | 0.09832361751481437 |  0.15758871535614638 |
#+end_SRC

** Plot example

You can easily generate plots, one example from [[http://docs.juliaplots.org/latest/examples/pyplot/][Plots Julia package]],
 is used to generate Figure [[PolarPlot]].

#+BEGIN_SRC julia  :eval no-export :session *demo_session* :exports code :results silent
Θ = range(0,stop=1.5π,length=100)
r = abs.(0.1 * randn(100) + sin.(3Θ))
plot(Θ,r,proj=:polar,m=2)
#+END_SRC

#+BEGIN_SRC julia  :eval no-export :session *demo_session* :results graphics :file example.png :exports results
savefig("example.png")
#+END_SRC

#+RESULTS:

#+CAPTION: A polar plot.
#+ATTR_HTML: :width 900px
#+NAME: PolarPlot
#+RESULTS:

** Org with bibliography

\begin{align}
\label{eq:one_eq}
{\frac {d}{dt}}\iint _{\Sigma (t)}\mathbf {F} (\mathbf {r} ,t)\cdot d\mathbf {A} = & \iint _{\Sigma (t)}\left(\mathbf {F} _{t}(\mathbf {r},t)+\left[\nabla \cdot \mathbf {F} (\mathbf {r} ,t)\right]\mathbf {v}
\right)\cdot d\mathbf {A} - \\
& \oint _{\partial \Sigma (t)}\left[\mathbf{v} \times \mathbf {F} (\mathbf {r} ,t)\right]\cdot d\mathbf {s} \nonumber
\end{align}

Eq. \ref{eq:one_eq} is demonstrated in cite:Flanders1973.
#+BEGIN_EXPORT latex
\printbibliography
#+END_EXPORT

#+BEGIN_EXPORT latex
\begin{comment}
#+END_EXPORT
#+BIBLIOGRAPHY: my-bib plain
#+BEGIN_EXPORT latex
\end{comment}
#+END_EXPORT
